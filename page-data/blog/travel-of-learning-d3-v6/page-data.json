{"componentChunkName":"component---src-templates-blog-detail-js","path":"/blog/travel-of-learning-d3-v6","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/blog/travel-of-learning-d3-v6\",\n  \"title\": \"d3.js 图表绘制练习\",\n  \"date\": \"2021-09-13 16:57:55\",\n  \"brief\": \"利用 d3.js v6 版本进行一些基本的图表绘制。\",\n  \"tag\": \"d3\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\u76F8\\u5173\\u5B66\\u4E60\\u94FE\\u63A5\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"D3.js\\u5B98\\u7F51 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://d3js.org\"\n  }, \"https://d3js.org\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"D3.js\\u5B9E\\u4F8B \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://observablehq.com/@d3\"\n  }, \"https://observablehq.com/@d3\"), \" \")), mdx(\"br\", null), mdx(\"h3\", null, \"\\u6563\\u70B9\\u56FE\"), mdx(\"p\", null, \"\\u5B9E\\u73B0\\u601D\\u8DEF\\uFF1A\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"x\\u3001y\\u8F74\\u90FD\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scaleLinear\"), \" \\u6BD4\\u4F8B\\u5C3A\\u6620\\u5C04\\u6570\\u636E\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u6563\\u70B9\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<circle>\"), \" \\uFF0C\\u7EBF\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<line>\"), \"  \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u9F20\\u6807\\u7684\\u4EA4\\u4E92\\u9700\\u8981\\u5BF9\\u8FD9\\u4E9B\\u6563\\u70B9\\u6DFB\\u52A0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mouseenter\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mouseleave\"), \" \\u4E8B\\u4EF6\\uFF0C\\u4E8B\\u4EF6\\u89E6\\u53D1\\u65F6\\u6539\\u53D8 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"circle\"), \" \\u5143\\u7D20\\u7684\\u534A\\u5F84 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"r\"), \" \"))), mdx(\"br\", null), mdx(\"h4\", null, \"\\u57FA\\u7840\\u6563\\u70B9\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-scatter-simple.gif\",\n    \"alt\": \"d3-scatter-simple.gif\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useEffect, useRef, useCallback } from 'react';\\nimport * as d3 from 'd3';\\nimport { useWindowResize } from '../../../hooks/resize';\\n\\nconst option = {\\n  grid: {\\n    top: 40,\\n    right: 30,\\n    bottom: 40,\\n    left: 50,\\n  },\\n  color: '#5470c6',\\n  symbolSize: 10,\\n};\\n\\nfunction ScatterSimple(props) {\\n  const chartRef = useRef(null);\\n\\n  const drawChart = useCallback(() => {\\n    if (!chartRef.current) return;\\n    const data = props.data || [],\\n      r = (props.symbolSize || option.symbolSize) / 2;\\n    const margin = props.grid\\n      ? Object.assign({}, option.grid, props.grid)\\n      : option.grid;\\n\\n    const $p = chartRef.current.parentNode;\\n    const width = props.width ? props.width : $p.offsetWidth,\\n      height = props.height ? props.height : $p.offsetHeight;\\n\\n    const x = d3\\n      .scaleLinear()\\n      .domain([0, d3.max(data, (d) => d[0])])\\n      .nice()\\n      .range([margin.left, width - margin.right]);\\n\\n    const y = d3\\n      .scaleLinear()\\n      .domain([0, d3.max(data, (d) => d[1])])\\n      .nice()\\n      .range([height - margin.bottom, margin.top]);\\n\\n    // \\u65B9\\u6CD5\\u6302\\u8F7D\\u4F9B\\u5916\\u90E8\\u8C03\\u7528\\n    chartRef.current.xScale = x;\\n    chartRef.current.yScale = y;\\n\\n    // \\u56FE\\u8868\\u7ED8\\u5236\\n    const xAxis = (g) =>\\n      g\\n        .attr('transform', `translate(0, ${height - margin.bottom})`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisBottom(x).ticks(width / 80))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) =>\\n          g\\n            .selectAll('.tick line')\\n            .clone()\\n            .attr('y2', -(height - margin.top - margin.bottom))\\n            .attr('stroke', '#E0E6F1')\\n            .style('stroke-opacity', (d) => (d === 0 ? 0 : 1))\\n        );\\n\\n    const yAxis = (g) =>\\n      g\\n        .attr('transform', `translate(${margin.left}, 0)`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisLeft(y))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) =>\\n          g\\n            .selectAll('.tick line')\\n            .clone()\\n            .attr('x2', width - margin.right - margin.left)\\n            .attr('stroke', '#E0E6F1')\\n            .style('stroke-opacity', (d) => (d === 0 ? 0 : 1))\\n        );\\n\\n    const svg = d3\\n      .select(chartRef.current)\\n      .select('.chart-svg')\\n      .attr('viewBox', `0 0 ${width} ${height}`);\\n\\n    svg.selectAll('*').remove();\\n\\n    svg.append('g').attr('class', 'x-axis').call(xAxis);\\n    svg.append('g').attr('class', 'y-axis').call(yAxis);\\n    svg\\n      .append('g')\\n      .attr('class', '.dots')\\n      .style('fill', option.color)\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .data(data)\\n          .join(\\n            (enter) =>\\n              enter\\n                .append('circle')\\n                .attr('class', 'dot')\\n                .attr('cx', (d) => x(d[0]))\\n                .attr('cy', (d) => y(d[1]))\\n                .attr('r', 0),\\n            (update) => update,\\n            (exit) => exit.remove()\\n          )\\n          .style('opacity', 0.8)\\n          .style('cursor', 'pointer')\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .transition()\\n          .duration(750)\\n          .ease(d3.easeCubicInOut)\\n          .attr('r', r)\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .on('mouseenter', (event) => {\\n            d3.select(event.target)\\n              .style('opacity', 0.75)\\n              .transition()\\n              .duration(200)\\n              .ease(d3.easeLinear)\\n              .attr('r', r * 1.1);\\n          })\\n          .on('mouseleave', (event) => {\\n            d3.select(event.target)\\n              .style('opacity', 0.8)\\n              .transition()\\n              .duration(200)\\n              .ease(d3.easeLinear)\\n              .attr('r', r);\\n          })\\n      );\\n  }, [props.grid, props.data, props.symbolSize, props.width, props.height]);\\n\\n  useEffect(() => {\\n    drawChart();\\n  }, [drawChart]);\\n\\n  useWindowResize(chartRef, drawChart);\\n\\n  return (\\n    <div className=\\\"chart-wrapper\\\" ref={chartRef}>\\n      <svg className=\\\"chart-svg\\\"></svg>\\n    </div>\\n  );\\n}\\n\\nexport default ScatterSimple;\\n\")), mdx(\"br\", null), mdx(\"h4\", null, \"Anscombe's quartet\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-scatter-anscombe-quartet.gif\",\n    \"alt\": \"d3-scatter-anscombe-quartet.gif\"\n  })), mdx(\"br\", null), mdx(\"h4\", null, \"\\u6570\\u636E\\u805A\\u5408\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-scatter-clustering.gif\",\n    \"alt\": \"d3-scatter-clustering.gif\"\n  })), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6570\\u503C\\u63D0\\u793A\\u6846\\u4F7F\\u7528 html \\u5143\\u7D20\\u5B9E\\u73B0\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u5DE6\\u4FA7\\u53EF\\u4EA4\\u4E92\\u7684\\u56FE\\u4F8B\\u4E5F\\u4F7F\\u7528 html \\u5143\\u7D20\\u5B9E\\u73B0\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useState, useEffect, useRef, useMemo, useCallback } from 'react';\\nimport * as d3 from 'd3';\\nimport ecStat from 'echarts-stat';\\nimport { useWindowResize } from '../../../hooks/resize';\\nimport './index.scss';\\n\\nconst option = {\\n  grid: {\\n    top: 40,\\n    right: 30,\\n    bottom: 40,\\n    left: 120,\\n  },\\n  colors: [\\n    '#37A2DA',\\n    '#e06343',\\n    '#37a354',\\n    '#b55dba',\\n    '#b5bd48',\\n    '#8378EA',\\n    '#96BFFF',\\n  ],\\n  symbolSize: 10,\\n};\\n\\nconst CLUSTER_COUNT = 6;\\nconst DIENSIION_CLUSTER_INDEX = 2;\\n\\nfunction ScatterClustering(props) {\\n  const chartRef = useRef(null);\\n  const tooltipRef = useRef(null);\\n  const [legendData, setLegendData] = useState([]);\\n  const [legendStatus, setLegendStatus] = useState([]);\\n\\n  const legendDataReverse = useMemo(\\n    () => [...legendData].reverse(),\\n    [legendData]\\n  );\\n\\n  useEffect(() => {\\n    const pieces = [];\\n    for (let i = 0, len = CLUSTER_COUNT; i < len; i++) {\\n      pieces.push({\\n        value: i,\\n        label: 'cluster ' + i,\\n        color: option.colors[i],\\n      });\\n    }\\n    setLegendData(pieces);\\n    setLegendStatus(Array(pieces.length).fill(true));\\n  }, []);\\n\\n  useEffect(() => {\\n    chartRef.current.showTooltip = (\\n      content,\\n      x,\\n      y,\\n      r,\\n      colorIndex,\\n      colorString\\n    ) => {\\n      const color = legendStatus[colorIndex] ? colorString : '#fff';\\n\\n      const tooltipEl = d3\\n        .select(tooltipRef.current)\\n        .classed('hidden', false)\\n        .classed('show', true)\\n        .style('border-color', color)\\n        .call((div) =>\\n          div\\n            .select('.tooltip__triangle')\\n            .style('border-bottom-color', color)\\n            .style('border-right-color', color)\\n        )\\n        .call((div) => div.select('.tooltip__txt').text(content))\\n        .call((div) =>\\n          div.select('.tooltip__symbol').style('background-color', color)\\n        );\\n\\n      const w = tooltipRef.current.offsetWidth,\\n        h = tooltipRef.current.offsetHeight;\\n\\n      tooltipEl.style(\\n        'transform',\\n        `translate3d(${x - w / 2}px,${y - r - 10 - h}px,0px)`\\n      );\\n    };\\n\\n    chartRef.current.hideTooltip = () => {\\n      d3.select(tooltipRef.current)\\n        .classed('show', false)\\n        .classed('hidden', true);\\n    };\\n  }, [legendStatus]);\\n\\n  const drawChart = useCallback(() => {\\n    if (!chartRef.current) return;\\n\\n    const data = props.data || [],\\n      r = (props.symbolSize || option.symbolSize) / 2;\\n    const margin = props.grid\\n      ? Object.assign({}, option.grid, props.grid)\\n      : option.grid;\\n\\n    const $p = chartRef.current.parentNode;\\n    const width = props.width ? props.width : $p.offsetWidth,\\n      height = props.height ? props.height : $p.offsetHeight;\\n\\n    const x = d3\\n      .scaleLinear()\\n      .domain(d3.extent(data, (d) => d[0]))\\n      .nice()\\n      .range([margin.left, width - margin.right]);\\n\\n    const y = d3\\n      .scaleLinear()\\n      .domain(d3.extent(data, (d) => d[1]))\\n      .nice()\\n      .range([height - margin.bottom, margin.top]);\\n\\n    const color = d3\\n      .scaleOrdinal()\\n      .domain(legendData.map((item) => item.value))\\n      .range(option.colors);\\n\\n    // \\u65B9\\u6CD5\\u6302\\u8F7D\\u4F9B\\u5916\\u90E8\\u8C03\\u7528\\n    chartRef.current.xScale = x;\\n    chartRef.current.yScale = y;\\n    chartRef.current.colorScale = color;\\n    chartRef.current.dotRadius = r;\\n\\n    // \\u56FE\\u8868\\u7ED8\\u5236\\n    const xAxis = (g) =>\\n      g\\n        .attr('transform', `translate(0, ${height - margin.bottom})`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisBottom(x))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) => g.selectAll('.tick line').classed('tick-line', true))\\n        .call((g) =>\\n          g\\n            .selectAll('.tick-line')\\n            .style('stroke-opacity', 0)\\n            .clone()\\n            .attr('class', 'split-line')\\n            .attr('y2', -(height - margin.top - margin.bottom))\\n            .style('stroke', (d) => (d === 0 ? '#6E7079' : '#E0E6F1'))\\n            .style('stroke-opacity', 1)\\n        )\\n        .call((g) => g.select('.domain').remove())\\n        .call((g) =>\\n          g\\n            .selectAll('.tick')\\n            .append('line')\\n            .attr('class', 'cross-tick')\\n            .attr('y2', 6)\\n            .style('stroke', 'currentColor')\\n            .attr('transform', `translate(0, ${-y(0) + margin.top})`)\\n        );\\n\\n    const yAxis = (g) =>\\n      g\\n        .attr('transform', `translate(${margin.left}, 0)`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisLeft(y))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) =>\\n          g\\n            .selectAll('.tick line')\\n            .attr('class', 'tick-line')\\n            .style('stroke-opacity', 0)\\n            .clone()\\n            .attr('class', 'split-line')\\n            .attr('x2', width - margin.right - margin.left)\\n            .attr('stroke', (d) => (d === 0 ? '#6E7079' : '#E0E6F1'))\\n            .style('stroke-opacity', 1)\\n        )\\n        .call((g) => g.select('.domain').remove())\\n        .call((g) =>\\n          g\\n            .selectAll('.tick')\\n            .append('line')\\n            .attr('class', 'cross-tick')\\n            .attr('x2', -6)\\n            .style('stroke', 'currentColor')\\n            .attr('transform', `translate(${x(0) - margin.left}, 0)`)\\n        );\\n\\n    const svg = d3\\n      .select(chartRef.current)\\n      .select('.chart-svg')\\n      .attr('viewBox', `0 0 ${width} ${height}`);\\n\\n    svg.selectAll('*').remove();\\n\\n    svg.append('g').attr('class', 'x-axis').call(xAxis);\\n    svg.append('g').attr('class', 'y-axis').call(yAxis);\\n\\n    const result = ecStat.clustering.hierarchicalKMeans(data, {\\n      clusterCount: CLUSTER_COUNT,\\n      outputType: 'single',\\n      outputClusterIndexDimension: DIENSIION_CLUSTER_INDEX,\\n    });\\n\\n    svg\\n      .append('g')\\n      .attr('class', 'dots')\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .data(result.data)\\n          .join(\\n            (enter) =>\\n              enter\\n                .append('circle')\\n                .attr('class', (d) => `dot dot-${d[2]}`)\\n                .attr('cx', (d) => x(d[0]))\\n                .attr('cy', (d) => y(d[1]))\\n                .attr('r', 0),\\n            (update) => update,\\n            (exit) => exit.remove()\\n          )\\n          .style('fill', (d) => color(d[2]))\\n          .style('stroke', '#555')\\n          .style('opacity', 0.8)\\n          .style('cursor', 'pointer')\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .transition()\\n          .duration(750)\\n          .ease(d3.easeCubicInOut)\\n          .attr('r', r)\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .on('mouseenter', (event, d) => {\\n            d3.select(event.target)\\n              .style('opacity', 0.75)\\n              .transition()\\n              .duration(200)\\n              .ease(d3.easeLinear)\\n              .attr('r', r * 1.1);\\n\\n            chartRef.current.showTooltip(\\n              `${d[0]}  ${d[1]}`,\\n              x(d[0]),\\n              y(d[1]),\\n              r,\\n              d[2],\\n              color(d[2])\\n            );\\n          })\\n          .on('mouseleave', (event) => {\\n            d3.select(event.target)\\n              .style('opacity', 0.8)\\n              .transition()\\n              .duration(200)\\n              .ease(d3.easeLinear)\\n              .attr('r', r);\\n            chartRef.current.hideTooltip();\\n          })\\n      );\\n  }, [\\n    props.grid,\\n    props.width,\\n    props.height,\\n    props.symbolSize,\\n    props.data,\\n    legendData,\\n  ]);\\n\\n  useEffect(() => {\\n    drawChart();\\n  }, [drawChart]);\\n\\n  useWindowResize(chartRef, drawChart);\\n\\n  const onToggleLegendItem = (val) => {\\n    legendStatus[val] = !legendStatus[val];\\n    setLegendStatus([...legendStatus]);\\n\\n    const svg = d3.select(chartRef.current).select('.chart-svg');\\n    svg\\n      .selectAll(`.dot.dot-${val}`)\\n      .style(\\n        'fill',\\n        legendStatus[val] ? chartRef.current.colorScale(val) : '#fff'\\n      );\\n  };\\n\\n  const onLegendItemEnter = (val) => {\\n    const svg = d3.select(chartRef.current).select('.chart-svg');\\n    svg\\n      .selectAll(`.dot.dot-${val}`)\\n      .style('opacity', 0.75)\\n      .transition()\\n      .duration(200)\\n      .ease(d3.easeLinear)\\n      .attr('r', chartRef.current.dotRadius * 1.1);\\n  };\\n\\n  const onLegendItemLeave = (val) => {\\n    const svg = d3.select(chartRef.current).select('.chart-svg');\\n    svg\\n      .selectAll(`.dot.dot-${val}`)\\n      .style('opacity', 0.8)\\n      .transition()\\n      .duration(200)\\n      .ease(d3.easeLinear)\\n      .attr('r', chartRef.current.dotRadius);\\n  };\\n\\n  return (\\n    <div className=\\\"chart-wrapper scatter-clustering\\\" ref={chartRef}>\\n      <div className=\\\"legend\\\">\\n        {legendData.length > 0 &&\\n          legendDataReverse.map((item) => {\\n            const isActive = legendStatus[item.value];\\n\\n            return (\\n              <div\\n                key={item.value}\\n                className={'legend-item' + (isActive ? '' : ' inactive')}\\n                onClick={() => onToggleLegendItem(item.value)}\\n                onMouseEnter={() => onLegendItemEnter(item.value)}\\n                onMouseLeave={() => onLegendItemLeave(item.value)}\\n              >\\n                <span\\n                  className=\\\"legend-item__symbol\\\"\\n                  style={{ backgroundColor: isActive ? item.color : '#fff' }}\\n                ></span>\\n                <span>{item.label}</span>\\n              </div>\\n            );\\n          })}\\n      </div>\\n      <svg className=\\\"chart-svg\\\"></svg>\\n      <div className=\\\"tooltip hidden\\\" ref={tooltipRef}>\\n        <div className=\\\"tooltip__content\\\">\\n          <span className=\\\"tooltip__symbol\\\"></span>\\n          <span className=\\\"tooltip__txt\\\"></span>\\n        </div>\\n        <div className=\\\"tooltip__triangle\\\"></div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ScatterClustering;\\n\")), mdx(\"br\", null), mdx(\"h4\", null, \"\\u6D9F\\u6F2A\\u7279\\u6548\\u6563\\u70B9\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-scatter-effect.gif\",\n    \"alt\": \"d3-scatter-effect.gif\"\n  })), mdx(\"p\", null, \"\\u52A8\\u753B\\u6548\\u679C\\u57FA\\u4E8E css3 \\u5B9E\\u73B0\"), mdx(\"br\", null), mdx(\"h3\", null, \"\\u67F1\\u72B6\\u56FE\"), mdx(\"p\", null, \"\\u5B9E\\u73B0\\u601D\\u8DEF\\uFF1A\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"x\\u3001y\\u8F74\\u7684\\u6BD4\\u4F8B\\u5C3A\\u6839\\u636E\\u9700\\u6C42\\u9009\\u62E9\\u3002\\u7C7B\\u76EE\\u8F74\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"scaleBand\"), \" \\uFF0C\\u6570\\u503C\\u8F74\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"scaleLinear\"), \" \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\u6761\\u5F62\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<rect>\"), \" \")), mdx(\"br\", null), mdx(\"h4\", null, \"\\u57FA\\u7840\\u67F1\\u72B6\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-bar-simple.gif\",\n    \"alt\": \"d3-bar-simple.gif\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useEffect, useRef, useCallback } from 'react';\\nimport * as d3 from 'd3';\\nimport { useWindowResize } from '../../../hooks/resize';\\n\\nconst option = {\\n  grid: {\\n    top: 40,\\n    right: 30,\\n    bottom: 40,\\n    left: 50,\\n  },\\n  color: '#5470c6',\\n  yAxis: {\\n    axisTick: {\\n      length: 5,\\n    },\\n  },\\n};\\n\\nfunction BarSimple(props) {\\n  const chartRef = useRef(null);\\n\\n  const drawChart = useCallback(() => {\\n    if (!chartRef.current) return;\\n\\n    const data = props.data || [];\\n    const color = props.color || option.color;\\n    const margin = props.grid\\n      ? Object.assign({}, option.grid, props.grid)\\n      : option.grid;\\n\\n    const $p = chartRef.current.parentNode;\\n    const width = props.width ? props.width : $p.offsetWidth,\\n      height = props.height ? props.height : $p.offsetHeight;\\n\\n    const xAxisData = data.map((item) => item.day);\\n\\n    const x = d3\\n      .scaleBand()\\n      .domain(xAxisData)\\n      .range([margin.left, width - margin.right])\\n      .paddingOuter(0.2)\\n      .paddingInner(0.4);\\n\\n    const y = d3\\n      .scaleLinear()\\n      .domain([0, d3.max(data, (d) => d.value)])\\n      .nice()\\n      .range([height - margin.bottom, margin.top]);\\n\\n    // \\u65B9\\u6CD5\\u6302\\u8F7D\\u4F9B\\u5916\\u90E8\\u8C03\\u7528\\n    chartRef.current.xScale = x;\\n    chartRef.current.yScale = y;\\n\\n    // \\u56FE\\u8868\\u7ED8\\u5236\\n    const xAxis = (g) =>\\n      g\\n        .attr('transform', `translate(0, ${height - margin.bottom})`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisBottom(x).tickSize(option.yAxis.axisTick.length))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) => g.selectAll('.tick line').style('stroke-opacity', 0));\\n\\n    const yAxis = (g) =>\\n      g\\n        .attr('transform', `translate(${margin.left}, 0)`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisLeft(y).tickSizeOuter(0).tickSizeInner(4))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) =>\\n          g\\n            .selectAll('.tick line')\\n            .attr('class', 'tick-line')\\n            .clone()\\n            .attr('class', 'split-line')\\n            .attr('x2', width - margin.right - margin.left)\\n            .attr('stroke', '#E0E6F1')\\n            .style('stroke-opacity', (d) => (d === 0 ? 0 : 1))\\n        )\\n        .call((g) => g.selectAll('.tick-line').style('stroke-opacity', 0))\\n        .call((g) => g.selectAll('.domain').style('stroke-opacity', 0));\\n\\n    const svg = d3\\n      .select(chartRef.current)\\n      .select('.chart-svg')\\n      .attr('viewBox', `0 0 ${width} ${height}`);\\n\\n    svg.selectAll('*').remove();\\n\\n    svg.append('g').attr('class', 'x-axis').call(xAxis);\\n    svg.append('g').attr('class', 'y-axis').call(yAxis);\\n\\n    // x axis tick \\u4E0E\\u6587\\u672C\\u7684\\u5BF9\\u9F50\\u65B9\\u5F0F\\n    svg\\n      .append('g')\\n      .attr('class', 'x-axis-line')\\n      .call((g) =>\\n        g.attr(\\n          'transform',\\n          `translate(${margin.left}, ${height - margin.bottom})`\\n        )\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('line')\\n          .data(d3.range(xAxisData.length - 1))\\n          .join(\\n            (enter) =>\\n              enter\\n                .append('line')\\n                .attr('class', 'tick')\\n                .attr(\\n                  'x1',\\n                  (d) =>\\n                    ((width - margin.right - margin.left) / xAxisData.length) *\\n                    (d + 1)\\n                )\\n                .attr('y1', 0)\\n                .attr(\\n                  'x2',\\n                  (d) =>\\n                    ((width - margin.right - margin.left) / xAxisData.length) *\\n                    (d + 1)\\n                )\\n                .attr('y2', option.yAxis.axisTick.length),\\n            (update) => update,\\n            (exit) => exit.remove()\\n          )\\n          .style('stroke', '#6E7079')\\n      );\\n\\n    svg\\n      .append('g')\\n      .attr('class', 'bars')\\n      .style('color', color)\\n      .call((g) =>\\n        g\\n          .selectAll('rect')\\n          .data(data)\\n          .join('rect')\\n          .attr('x', (d) => x(d.day))\\n          .attr('y', y(0))\\n          .attr('width', x.bandwidth())\\n          .attr('height', 0)\\n          .style('fill', 'currentColor')\\n          .style('cursor', 'pointer')\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('rect')\\n          .transition()\\n          .duration(1000)\\n          .ease(d3.easeCubicInOut)\\n          .attr('y', (d) => y(d.value))\\n          .attr('height', (d) => y(0) - y(d.value))\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('rect')\\n          .on('mouseenter', (event) => {\\n            d3.select(event.target).style('fill', '#708bdc');\\n          })\\n          .on('mouseleave', (event) => {\\n            d3.select(event.target).style('fill', 'currentColor');\\n          })\\n      );\\n  }, [props.data, props.grid, props.width, props.height, props.color]);\\n\\n  useEffect(() => {\\n    drawChart();\\n  }, [drawChart]);\\n\\n  useWindowResize(chartRef, drawChart);\\n\\n  return (\\n    <div className=\\\"chart-wrapper\\\" ref={chartRef}>\\n      <svg className=\\\"chart-svg\\\"></svg>\\n    </div>\\n  );\\n}\\n\\nexport default BarSimple;\\n\")), mdx(\"br\", null), mdx(\"h4\", null, \"\\u5E26\\u80CC\\u666F\\u8272\\u7684\\u67F1\\u72B6\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-bar-background.gif\",\n    \"alt\": \"d3-bar-background.gif\"\n  })), mdx(\"br\", null), mdx(\"h4\", null, \"\\u5750\\u6807\\u8F74\\u523B\\u5EA6\\u4E0E\\u6807\\u7B7E\\u5BF9\\u9F50\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-tick-align.gif\",\n    \"alt\": \"d3-tick-align.gif\"\n  })), mdx(\"br\", null), mdx(\"h4\", null, \"\\u6A2A\\u5411\\u7684\\u6761\\u5F62\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-bar-y-category.gif\",\n    \"alt\": \"d3-bar-y-category.gif\"\n  })), mdx(\"br\", null), mdx(\"h4\", null, \"\\u6570\\u636E\\u96C6\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-bar-dataset-simple.gif\",\n    \"alt\": \"d3-bar-dataset-simple.gif\"\n  })), mdx(\"br\", null), mdx(\"h3\", null, \"\\u6298\\u7EBF\\u56FE\"), mdx(\"h4\", null, \"\\u57FA\\u7840\\u6298\\u7EBF\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-line-simple.png\",\n    \"alt\": \"d3-line-simple.png\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useEffect, useRef, useCallback } from 'react';\\nimport * as d3 from 'd3';\\nimport { useWindowResize } from '../../../hooks/resize';\\nimport chartUtil from '../../../utils/chartUtil';\\n\\nconst option = {\\n  grid: {\\n    top: 40,\\n    right: 30,\\n    bottom: 40,\\n    left: 50,\\n  },\\n  color: '#5470c6',\\n  symbolSize: 4,\\n  yAxis: {\\n    axisTick: {\\n      length: 5,\\n    },\\n  },\\n};\\n\\nfunction LineSimple(props) {\\n  const chartRef = useRef(null);\\n\\n  const drawChart = useCallback(() => {\\n    if (!chartRef.current) return;\\n\\n    const data = props.data || [];\\n    const color = props.color || option.color;\\n    const r = (props.symbolSize || option.symbolSize) / 2;\\n    const margin = props.grid\\n      ? Object.assign({}, option.grid, props.grid)\\n      : option.grid;\\n\\n    const $p = chartRef.current.parentNode;\\n    const width = props.width ? props.width : $p.offsetWidth,\\n      height = props.height ? props.height : $p.offsetHeight;\\n\\n    const xAxisData = data.map((item) => item.day);\\n\\n    const x = d3\\n      .scaleBand()\\n      .domain(xAxisData)\\n      .range([margin.left, width - margin.right])\\n      .paddingOuter(0.5)\\n      .paddingInner(1);\\n\\n    const y = d3\\n      .scaleLinear()\\n      .domain([0, d3.max(data, (d) => d.value)])\\n      .nice()\\n      .range([height - margin.bottom, margin.top]);\\n\\n    const line = d3\\n      .line()\\n      .defined((d) => !Number.isNaN(d.value))\\n      .x((d) => x(d.day))\\n      .y((d) => y(d.value));\\n\\n    // \\u65B9\\u6CD5\\u6302\\u8F7D\\u4F9B\\u5916\\u90E8\\u8C03\\u7528\\n    chartRef.current.xScale = x;\\n    chartRef.current.yScale = y;\\n\\n    // \\u56FE\\u8868\\u7ED8\\u5236\\n    const xAxis = (g) =>\\n      g\\n        .attr('transform', `translate(0, ${height - margin.bottom})`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisBottom(x).tickSize(option.yAxis.axisTick.length))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) => g.selectAll('.tick line').style('stroke-opacity', 0));\\n\\n    const yAxis = (g) =>\\n      g\\n        .attr('transform', `translate(${margin.left}, 0)`)\\n        .style('color', '#6E7079')\\n        .call(d3.axisLeft(y).tickSizeOuter(0).tickSizeInner(4))\\n        .call((g) => g.selectAll('.tick text').style('font-size', 12))\\n        .call((g) =>\\n          g\\n            .selectAll('.tick line')\\n            .attr('class', 'tick-line')\\n            .clone()\\n            .attr('class', 'split-line')\\n            .attr('x2', width - margin.right - margin.left)\\n            .attr('stroke', '#E0E6F1')\\n            .style('stroke-opacity', (d) => (d === 0 ? 0 : 1))\\n        )\\n        .call((g) => g.selectAll('.tick-line').style('stroke-opacity', 0))\\n        .call((g) => g.selectAll('.domain').style('stroke-opacity', 0));\\n\\n    const svg = d3\\n      .select(chartRef.current)\\n      .select('.chart-svg')\\n      .attr('viewBox', `0 0 ${width} ${height}`);\\n\\n    svg.selectAll('*').remove();\\n\\n    svg.append('g').attr('class', 'x-axis').call(xAxis);\\n    svg.append('g').attr('class', 'y-axis').call(yAxis);\\n\\n    // x axis tick \\u4E0E\\u6587\\u672C\\u7684\\u5BF9\\u9F50\\u65B9\\u5F0F\\n    svg\\n      .append('g')\\n      .attr('class', 'x-axis-line')\\n      .call((g) =>\\n        g.attr(\\n          'transform',\\n          `translate(${margin.left}, ${height - margin.bottom})`\\n        )\\n      )\\n      .call((g) =>\\n        g\\n          .selectAll('line')\\n          .data(d3.range(xAxisData.length - 1))\\n          .join(\\n            (enter) =>\\n              enter\\n                .append('line')\\n                .attr('class', 'tick')\\n                .attr(\\n                  'x1',\\n                  (d) =>\\n                    ((width - margin.right - margin.left) / xAxisData.length) *\\n                    (d + 1)\\n                )\\n                .attr('y1', 0)\\n                .attr(\\n                  'x2',\\n                  (d) =>\\n                    ((width - margin.right - margin.left) / xAxisData.length) *\\n                    (d + 1)\\n                )\\n                .attr('y2', option.yAxis.axisTick.length),\\n            (update) => update,\\n            (exit) => exit.remove()\\n          )\\n          .style('stroke', '#6E7079')\\n      );\\n      \\n    // line\\n    const l = chartUtil.getLength(line(data));\\n    svg\\n      .append('g')\\n      .attr('class', 'line')\\n      .style('color', color)\\n      .call((g) =>\\n        g\\n          .append('path')\\n          .datum(data)\\n          .attr('fill', 'none')\\n          .attr('stroke-dasharray', `0,${l}`)\\n          .attr('d', line)\\n          .attr('stroke-linejoin', 'round')\\n          .attr('stroke-linecap', 'round')\\n          .style('stroke-width', 2)\\n          .style('stroke', 'currentColor')\\n          .style('cursor', 'pointer')\\n          .transition()\\n          .duration(1000)\\n          .ease(d3.easeLinear)\\n          .attr('stroke-dasharray', `${l},${l}`)\\n      )\\n      .call((g) =>\\n        g\\n          .select('path')\\n          .on('mouseenter', (event) => {\\n            d3.select(event.target)\\n              .transition()\\n              .duration(300)\\n              .ease(d3.easeCubicInOut)\\n              .style('stroke-width', 3);\\n          })\\n          .on('mouseleave', (event) => {\\n            d3.select(event.target)\\n              .transition()\\n              .duration(300)\\n              .ease(d3.easeCubicInOut)\\n              .style('stroke-width', 2);\\n          })\\n      );\\n\\n    svg\\n      .append('g')\\n      .attr('class', 'dots')\\n      .style('fill', '#fff')\\n      .style('stroke', color)\\n      .style('stroke-width', 2)\\n      .call((g) =>\\n        g\\n          .selectAll('circle')\\n          .data(data)\\n          .join('circle')\\n          .attr('cx', (d) => x(d.day))\\n          .attr('cy', (d) => y(d.value))\\n          .attr('r', r)\\n          .style('cursor', 'pointer')\\n          .on('mouseenter', (event) => {\\n            d3.select(event.target)\\n              .transition()\\n              .duration(300)\\n              .ease(d3.easeCubicInOut)\\n              .attr('r', r * 1.5);\\n            svg\\n              .select('.line path')\\n              .transition()\\n              .duration(300)\\n              .ease(d3.easeCubicInOut)\\n              .style('stroke-width', 3);\\n          })\\n          .on('mouseleave', (event) => {\\n            d3.select(event.target)\\n              .transition()\\n              .duration(300)\\n              .ease(d3.easeCubicInOut)\\n              .attr('r', r);\\n            svg\\n              .select('.line path')\\n              .transition()\\n              .duration(300)\\n              .ease(d3.easeCubicInOut)\\n              .style('stroke-width', 2);\\n          })\\n      );\\n  }, [\\n    props.data,\\n    props.grid,\\n    props.width,\\n    props.height,\\n    props.color,\\n    props.symbolSize,\\n  ]);\\n\\n  useEffect(() => {\\n    drawChart();\\n  }, [drawChart]);\\n\\n  useWindowResize(chartRef, drawChart);\\n\\n  return (\\n    <div className=\\\"chart-wrapper\\\" ref={chartRef}>\\n      <svg className=\\\"chart-svg\\\"></svg>\\n    </div>\\n  );\\n}\\n\\nexport default LineSimple;\\n\")), mdx(\"br\", null), mdx(\"h4\", null, \"\\u57FA\\u7840\\u5E73\\u6ED1\\u6298\\u7EBF\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-line-smooth.gif\",\n    \"alt\": \"d3-line-smooth.gif\"\n  })), mdx(\"br\", null), mdx(\"h4\", null, \"\\u57FA\\u7840\\u9762\\u79EF\\u56FE\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/d3-line-area.png\",\n    \"alt\": \"d3-line-area.png\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"2021-09-13 16:57:55","title":"d3.js 图表绘制练习","slug":"/blog/travel-of-learning-d3-v6"}}},"pageContext":{"slug":"/blog/travel-of-learning-d3-v6","next":"/blog/react-drag-and-drop","previous":"/blog/vue-image-processor"}},"staticQueryHashes":[]}